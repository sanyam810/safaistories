// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  role          UserRole  @default(USER)
  highlights Highlight[]
  likes Like[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post{

  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  slug String @unique
  title String
  desc String
  img String?
  views Int @default(0)
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  comments Comment[]
  likedBy   Like[]
  likesCount Int      @default(0)
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])

  @@unique([userEmail, postSlug])
}

model Comment{

  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc String
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  postSlug String
  post Post @relation(fields: [postSlug], references: [slug])

}

model Highlight {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  slug String @unique
  title String
  summary String
  transcript String?
  image String
  userEmail String
  youtubeId String?
  featured Boolean @default(false)
  user User @relation(fields: [userEmail], references: [email])
}